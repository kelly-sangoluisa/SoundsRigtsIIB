# Script de prueba para el sistema de canciones y licencias
# Este script prueba todos los endpoints principales del sistema

Write-Host "üéµ TESTING SOUNDSRIGHTS - SONGS & LICENSES SYSTEM" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Configuraci√≥n
$songsServiceUrl = "http://localhost:3002"
$authServiceUrl = "http://localhost:3001"
$gatewayUrl = "http://localhost:3100"

Write-Host "`n1Ô∏è‚É£ Verificando servicios..." -ForegroundColor Yellow

# Test Health Endpoints
try {
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/health" -UseBasicParsing
    $healthData = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Songs Service: OK" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Songs Service: Error - $($_.Exception.Message)" -ForegroundColor Red
}

try {
    $response = Invoke-WebRequest -Uri "$authServiceUrl/health" -UseBasicParsing
    $healthData = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Auth Service: OK" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Auth Service: Error - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n2Ô∏è‚É£ Probando endpoints de canciones..." -ForegroundColor Yellow

# Test Songs Endpoints
try {
    Write-Host "üìã Probando 'Mis canciones' para usuario 1..." -ForegroundColor Gray
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/songs/mine?userId=1" -UseBasicParsing
    $songsData = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Mis canciones: $($songsData.total) canciones encontradas" -ForegroundColor Green
    if ($songsData.songs.Count -gt 0) {
        $firstSong = $songsData.songs[0]
        Write-Host "   Primera canci√≥n: '$($firstSong.name)' - Estado: $($firstSong.status)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Mis canciones: Error - $($_.Exception.Message)" -ForegroundColor Red
}

try {
    Write-Host "`nüìã Probando canciones disponibles..." -ForegroundColor Gray
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/songs/available" -UseBasicParsing
    $availableData = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Canciones disponibles: $($availableData.total) canciones" -ForegroundColor Green
    if ($availableData.songs.Count -gt 0) {
        $firstAvailable = $availableData.songs[0]
        Write-Host "   Primera disponible: '$($firstAvailable.name)' - Precio: $($firstAvailable.price)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Canciones disponibles: Error - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n3Ô∏è‚É£ Probando endpoints de licencias..." -ForegroundColor Yellow

try {
    Write-Host "üìÑ Probando licencias compradas para usuario 1..." -ForegroundColor Gray
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/licenses/purchased?userId=1" -UseBasicParsing
    $purchasedData = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Licencias compradas: $($purchasedData.licenses.Count) licencias" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Licencias compradas: Error - $($_.Exception.Message)" -ForegroundColor Red
}

try {
    Write-Host "`nüìÑ Probando licencias vendidas para usuario 1..." -ForegroundColor Gray
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/licenses/sold?userId=1" -UseBasicParsing
    $soldData = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Licencias vendidas: $($soldData.licenses.Count) licencias" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Licencias vendidas: Error - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n4Ô∏è‚É£ Probando creaci√≥n de canci√≥n..." -ForegroundColor Yellow

$newSong = @{
    title = "Test Song $(Get-Date -Format 'HHmmss')"
    genre = "test"
    price = 9.99
    artistId = 1
} | ConvertTo-Json

try {
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/songs" -Method POST -Body $newSong -ContentType "application/json" -UseBasicParsing
    $createdSong = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Canci√≥n creada: '$($createdSong.name)' (ID: $($createdSong.id))" -ForegroundColor Green
    
    # Guardar ID para pruebas posteriores
    $testSongId = $createdSong.id
    
} catch {
    Write-Host "‚ùå Crear canci√≥n: Error - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n5Ô∏è‚É£ Probando b√∫squeda con filtros..." -ForegroundColor Yellow

try {
    Write-Host "üîç Buscando canciones de g√©nero 'electronic'..." -ForegroundColor Gray
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/songs/available?genre=electronic" -UseBasicParsing
    $filteredData = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Filtro por g√©nero: $($filteredData.total) canciones electronic" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Filtro por g√©nero: Error - $($_.Exception.Message)" -ForegroundColor Red
}

try {
    Write-Host "`nüîç Buscando canciones con precio m√°ximo 3.00..." -ForegroundColor Gray
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/songs/available?maxPrice=3.00" -UseBasicParsing
    $priceFiltered = $response.Content | ConvertFrom-Json
    Write-Host "‚úÖ Filtro por precio: $($priceFiltered.total) canciones ‚â§ $3.00" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Filtro por precio: Error - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n6Ô∏è‚É£ Probando compra de canci√≥n..." -ForegroundColor Yellow

$purchaseData = @{
    buyerId = 2
    buyerMessage = "Me gusta esta canci√≥n para mi proyecto"
    offerPrice = 2.50
} | ConvertTo-Json

try {
    # Usar la primera canci√≥n disponible
    $response = Invoke-WebRequest -Uri "$songsServiceUrl/songs/available" -UseBasicParsing
    $availableData = $response.Content | ConvertFrom-Json
    
    if ($availableData.songs.Count -gt 0) {
        $songToBuy = $availableData.songs[0]
        $buyResponse = Invoke-WebRequest -Uri "$songsServiceUrl/songs/$($songToBuy.id)/purchase" -Method POST -Body $purchaseData -ContentType "application/json" -UseBasicParsing
        $purchaseResult = $buyResponse.Content | ConvertFrom-Json
        Write-Host "‚úÖ Compra iniciada: Licencia ID $($purchaseResult.licenseId)" -ForegroundColor Green
        Write-Host "   üìù $($purchaseResult.message)" -ForegroundColor Gray
    } else {
        Write-Host "‚ö†Ô∏è No hay canciones disponibles para comprar" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Compra de canci√≥n: Error - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ RESUMEN DE PRUEBAS COMPLETADO!" -ForegroundColor Cyan
Write-Host "==================================" -ForegroundColor Cyan

Write-Host "`nüìä FUNCIONALIDADES IMPLEMENTADAS:" -ForegroundColor Green
Write-Host "‚úÖ Obtener canciones del usuario (Mis Canciones)" -ForegroundColor White
Write-Host "‚úÖ Obtener canciones disponibles para compra" -ForegroundColor White  
Write-Host "‚úÖ Crear nuevas canciones" -ForegroundColor White
Write-Host "‚úÖ Filtrar canciones por g√©nero y precio" -ForegroundColor White
Write-Host "‚úÖ Buscar canciones por texto" -ForegroundColor White
Write-Host "‚úÖ Iniciar proceso de compra de licencias" -ForegroundColor White
Write-Host "‚úÖ Ver licencias compradas" -ForegroundColor White
Write-Host "‚úÖ Ver licencias vendidas" -ForegroundColor White
Write-Host "‚úÖ Manejo de estados de canciones" -ForegroundColor White

Write-Host "`nüîó ENDPOINTS DISPONIBLES:" -ForegroundColor Blue
Write-Host "Songs Service (Puerto 3002):" -ForegroundColor Yellow
Write-Host "  GET  /songs/mine?userId=X         - Mis canciones" -ForegroundColor White
Write-Host "  GET  /songs/available            - Canciones disponibles" -ForegroundColor White
Write-Host "  POST /songs                      - Crear canci√≥n" -ForegroundColor White
Write-Host "  PUT  /songs/:id                  - Actualizar canci√≥n" -ForegroundColor White
Write-Host "  DELETE /songs/:id?userId=X       - Eliminar canci√≥n" -ForegroundColor White
Write-Host "  GET  /songs/:id                  - Ver canci√≥n espec√≠fica" -ForegroundColor White
Write-Host "  POST /songs/:id/purchase         - Comprar canci√≥n" -ForegroundColor White
Write-Host "  PATCH /songs/:id/status          - Cambiar estado" -ForegroundColor White
Write-Host "`nLicenses:" -ForegroundColor Yellow
Write-Host "  GET  /licenses/purchased?userId=X - Licencias compradas" -ForegroundColor White
Write-Host "  GET  /licenses/sold?userId=X     - Licencias vendidas" -ForegroundColor White

Write-Host "`nüöÄ LISTO PARA CONECTAR CON EL FRONTEND!" -ForegroundColor Green
